//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Insus.NET.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        decimal Add(decimal number1, decimal number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        System.Threading.Tasks.Task<decimal> AddAsync(decimal number1, decimal number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtract", ReplyAction="http://tempuri.org/ICalculator/SubtractResponse")]
        decimal Subtract(decimal number1, decimal number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtract", ReplyAction="http://tempuri.org/ICalculator/SubtractResponse")]
        System.Threading.Tasks.Task<decimal> SubtractAsync(decimal number1, decimal number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        decimal Multiply(decimal number1, decimal number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<decimal> MultiplyAsync(decimal number1, decimal number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        decimal Divide(decimal number1, decimal number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        System.Threading.Tasks.Task<decimal> DivideAsync(decimal number1, decimal number2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : Insus.NET.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<Insus.NET.ServiceReference1.ICalculator>, Insus.NET.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal Add(decimal number1, decimal number2) {
            return base.Channel.Add(number1, number2);
        }
        
        public System.Threading.Tasks.Task<decimal> AddAsync(decimal number1, decimal number2) {
            return base.Channel.AddAsync(number1, number2);
        }
        
        public decimal Subtract(decimal number1, decimal number2) {
            return base.Channel.Subtract(number1, number2);
        }
        
        public System.Threading.Tasks.Task<decimal> SubtractAsync(decimal number1, decimal number2) {
            return base.Channel.SubtractAsync(number1, number2);
        }
        
        public decimal Multiply(decimal number1, decimal number2) {
            return base.Channel.Multiply(number1, number2);
        }
        
        public System.Threading.Tasks.Task<decimal> MultiplyAsync(decimal number1, decimal number2) {
            return base.Channel.MultiplyAsync(number1, number2);
        }
        
        public decimal Divide(decimal number1, decimal number2) {
            return base.Channel.Divide(number1, number2);
        }
        
        public System.Threading.Tasks.Task<decimal> DivideAsync(decimal number1, decimal number2) {
            return base.Channel.DivideAsync(number1, number2);
        }
    }
}
